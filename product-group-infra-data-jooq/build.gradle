buildscript {
	repositories {
		mavenLocal()
		mavenCentral()
	}
    dependencies {
    	classpath 'org.jooq:jooq-codegen:3.14.4'
	    classpath 'mysql:mysql-connector-java:8.0.22'
	    classpath 'org.testcontainers:testcontainers:1.15.0'
	    classpath 'org.testcontainers:mysql:1.15.0'
		classpath 'org.liquibase:liquibase-core:4.2.0'  
    }
}

jacocoTestReport {
	afterEvaluate {
		classDirectories.setFrom(files(classDirectories.files.collect {
			fileTree(dir: it, exclude: '**/generated/**')
		}))
	}
}


dependencies {
	implementation 'org.liquibase:liquibase-core:4.2.0'
	implementation 'org.jooq:jooq:3.14.4'
	implementation 'mysql:mysql-connector-java:8.0.22'
	implementation project(':product-group-data-api')
    
    testImplementation 'org.testcontainers:testcontainers:1.15.0'
	testImplementation 'org.testcontainers:mysql:1.15.0'
}


import liquibase.Contexts
import liquibase.LabelExpression
import liquibase.Liquibase
import liquibase.database.DatabaseFactory
import liquibase.database.jvm.JdbcConnection
import liquibase.resource.FileSystemResourceAccessor
import org.jooq.codegen.GenerationTool
import org.jooq.meta.jaxb.*
import org.testcontainers.containers.MySQLContainer

import java.sql.Connection
import java.sql.DriverManager

class JOOQCodeGenerator extends DefaultTask {

	String schema
	String projectDirectory
	String changeLogFile
	String packageName
    
    @TaskAction
    void generateCode() {
        MySQLContainer mysql = new MySQLContainer("mysql:8.0.22")
            .withDatabaseName(schema)
            .withUsername("root")
            .withPassword("")
            .withEnv("MYSQL_ROOT_HOST", "%")
		try{
				File file = this.getProject().getRootDir()
				mysql.start() 
				Class.forName(mysql.getDriverClassName())		       
		        Connection conn = DriverManager.getConnection(mysql.getJdbcUrl(),mysql.getUsername(),mysql.getPassword())
				String projectsubdir = projectDirectory
				liquibase.database.Database database = DatabaseFactory.getInstance().findCorrectDatabaseImplementation(new JdbcConnection(conn))
				Liquibase liquibase = new liquibase.Liquibase(projectsubdir + "/" + changeLogFile , 
											new FileSystemResourceAccessor(file), database)
				liquibase.update(new Contexts(), new LabelExpression())
				String fullPath = file.getAbsolutePath()
				GenerationTool.generate(new Configuration()
							    .withJdbc(new Jdbc()
							        .withDriver(mysql.getDriverClassName())
							        .withUrl(mysql.getJdbcUrl())
							        .withUser(mysql.getUsername())
							        .withPassword(mysql.getPassword()))
							    .withGenerator(new Generator()
							        .withDatabase(new Database()
							        	.withInputSchema(schema)
							        	.withExcludes("DATABASECHANGELOG|DATABASECHANGELOGLOCK"))
							        .withGenerate(new Generate()
							            .withPojos(true)
							            .withDaos(true))
							        .withTarget(new Target()
							            .withPackageName(packageName)
							            .withDirectory(fullPath + projectsubdir + '/src/main/java'))))
	        } finally {
	        	mysql.stop()
	        }
        
    }
}

task generateJooqJavaCode(type : JOOQCodeGenerator) {
    schema 'product_management'
	projectDirectory '/product-group-infra-data-jooq'
	changeLogFile '/src/main/resources/database-change-log.xml'
	packageName 'tr.com.minicrm.productgroup.data.jooq.generated'
}